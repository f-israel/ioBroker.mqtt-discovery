{
  "version": 3,
  "sources": ["../../src/lib/state-finder.ts"],
  "sourcesContent": ["export async function findStatesMarkedWithEnum(adapter: ioBroker.Adapter, enumId: string): Promise<string[]> {\n    const resolveToStateIds = async (objId: string): Promise<string[]> => {\n        const obj = await adapter.getForeignObjectAsync(objId);\n        if (!obj) return [];\n\n        switch (obj.type) {\n            case 'state':\n                return [obj._id];\n            case 'channel':\n            case 'device':\n            case 'folder':\n            case 'meta':\n            case 'adapter':\n            case 'instance':\n            case 'group':\n                break;\n            case 'enum':\n            case 'host':\n            case 'user':\n            case 'script':\n            case 'chart':\n            case 'schedule':\n            case 'config':\n            case 'design':\n                adapter.log.warn(`Found object of type '${obj.type}' which is not supported`);\n                return [];\n        }\n\n        //getting here means we have a kind of state container and can recurse\n\n        adapter.log.debug(`Found object '${obj._id}' of type '${obj.type}' - searching for members`);\n\n        const distinctList: string[] = [];\n        for (const stateId in await adapter.getForeignStatesAsync(`${obj._id}.*`)) {\n            if (!distinctList.includes(stateId)) distinctList.push(stateId);\n        }\n        return distinctList;\n    };\n    const enumObj = await adapter.getForeignObjectAsync(`enum.functions.${enumId}`);\n    let stateIds: string[] = [];\n    for (const member of enumObj?.common.members ?? []) {\n        stateIds = [...stateIds, ...(await resolveToStateIds(member))];\n    }\n    return stateIds;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,yBAAyB,SAA2B,QAAmC;AAA7G;AACI,QAAM,oBAAoB,OAAO,UAAqC;AAClE,UAAM,MAAM,MAAM,QAAQ,sBAAsB,KAAK;AACrD,QAAI,CAAC;AAAK,aAAO,CAAC;AAElB,YAAQ,IAAI,MAAM;AAAA,MACd,KAAK;AACD,eAAO,CAAC,IAAI,GAAG;AAAA,MACnB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,gBAAQ,IAAI,KAAK,yBAAyB,IAAI,IAAI,0BAA0B;AAC5E,eAAO,CAAC;AAAA,IAChB;AAIA,YAAQ,IAAI,MAAM,iBAAiB,IAAI,GAAG,cAAc,IAAI,IAAI,2BAA2B;AAE3F,UAAM,eAAyB,CAAC;AAChC,eAAW,WAAW,MAAM,QAAQ,sBAAsB,GAAG,IAAI,GAAG,IAAI,GAAG;AACvE,UAAI,CAAC,aAAa,SAAS,OAAO;AAAG,qBAAa,KAAK,OAAO;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AACA,QAAM,UAAU,MAAM,QAAQ,sBAAsB,kBAAkB,MAAM,EAAE;AAC9E,MAAI,WAAqB,CAAC;AAC1B,aAAW,WAAU,wCAAS,OAAO,YAAhB,YAA2B,CAAC,GAAG;AAChD,eAAW,CAAC,GAAG,UAAU,GAAI,MAAM,kBAAkB,MAAM,CAAE;AAAA,EACjE;AACA,SAAO;AACX;",
  "names": []
}
