{
  "version": 3,
  "sources": ["../../src/lib/mqtt-discovery-helper.ts"],
  "sourcesContent": ["// Definiere ein Interface f\u00FCr die Discovery-Nachricht\nexport interface DiscoveryMessage {\n    topic: string; // MQTT Discovery Topic, z.B. \"homeassistant/sensor/my_device_config/config\"\n    payload: any; // JSON-Payload, die die Konfiguration enth\u00E4lt\n}\n\n/**\n * Ermittelt anhand des ioBroker-States die passende Home Assistant Komponente.\n * Dabei wird insbesondere der Typ (state.common.type) und optional die Rolle (state.common.role)\n * ber\u00FCcksichtigt:\n * - Boolean: Wird als \"switch\" genutzt, sofern die Rolle nicht explizit etwas sensorartiges (z.B. \"binary_sensor\") nahelegt.\n * - Number / String: Standardm\u00E4\u00DFig als \"sensor\".\n *\n * @param state Der ioBroker-State, dessen common-Informationen zur Klassifikation herangezogen werden.\n * @returns Den HA-Komponenten-Typ als string (z.B. \"sensor\", \"switch\" oder \"binary_sensor\")\n */\nexport function mapStateToHAComponent(state: ioBroker.Object): string {\n    const type = state.common?.type;\n    const role = (state.common?.role || \"\").toLowerCase();\n\n    if (type === \"boolean\") {\n        // Wenn in der Rolle beispielsweise \"sensor\" enthalten ist, k\u00F6nnte man auch\n        // einen \"binary_sensor\" verwenden \u2013 hier als Beispiel:\n        if (role.includes(\"sensor\")) {\n            return \"binary_sensor\";\n        }\n        // Standard: Bei Boolean als Schalter\n        return \"switch\";\n    } else if (type === \"number\" || type === \"string\") {\n        return \"sensor\";\n    }\n    // Fallback: sensor\n    return \"sensor\";\n}\n\n/**\n * Generiert aus einer ioBroker State-ID und dem zugeh\u00F6rigen State-Objekt eine Discovery-Nachricht,\n * die f\u00FCr Home Assistant per MQTT Discovery genutzt werden kann.\n *\n * Wichtige Punkte:\n * - Das Discovery-Topic wird gem\u00E4\u00DF dem HA-Schema aufgebaut:\n *   \"homeassistant/<haComponent>/<objectId>/config\"\n * - Die objectId wird aus der State-ID generiert (Punkte werden z.B. durch Unterstriche ersetzt).\n * - Der Basis-MQTT-Topic (z.B. \"iobroker/<stateId mit Slashes>\") wird zur Definition der state_topic\n *   und ggf. command_topic genutzt.\n * - Je nach HA-Komponente (z.B. switch, sensor, binary_sensor) werden unterschiedliche Felder im Payload gesetzt.\n *\n * @param stateId Die ioBroker State-ID (z.B. \"mqtt-discovery.0.my_device\")\n * @param state Das zugeh\u00F6rige State-Objekt, das auch Informationen wie den Typ und die Rolle enth\u00E4lt.\n * @returns Ein Objekt mit dem Discovery-Topic und dem Payload, der per MQTT versendet werden kann.\n */\nexport function generateDiscoveryMessage(stateId: string, state: ioBroker.Object): DiscoveryMessage {\n    // Ermitteln des HA-Komponenten-Typs anhand des State-Typs und ggf. der Rolle.\n    const haComponent = mapStateToHAComponent(state);\n\n    // Generiere eine eindeutige Object-ID, indem wir Punkte durch Unterstriche ersetzen.\n    // Optional k\u00F6nntest du hier auch noch den Adapter-Namen entfernen, wenn du das m\u00F6chtest.\n    const objectId = stateId.replace(/\\./g, \"_\");\n\n    // Das Discovery-Topic gem\u00E4\u00DF HA-Schema:\n    // Beispiel: \"homeassistant/switch/mqtt-discovery_0_my_device/config\"\n    const discoveryTopic = `homeassistant/${haComponent}/${objectId}/config`;\n\n    // Erzeuge den Basis-MQTT-Topic, in dem die State-Informationen abgelegt werden:\n    // Hierbei werden Punkte in der State-ID durch Slashes ersetzt.\n    // Beispiel: \"iobroker/mqtt-discovery/0/my_device\"\n    const baseTopic = `iobroker/${stateId.replace(/\\./g, \"/\")}`;\n\n    // Grundlegender Payload, der in jedem Fall gesetzt wird:\n    const payload: any = {\n        name: objectId,\n        state_topic: `${baseTopic}/state`,\n        unique_id: `mqtt_discovery_${objectId}`,\n    };\n\n    // Abh\u00E4ngig von der HA-Komponente f\u00FCgen wir weitere Felder hinzu:\n    if (haComponent === \"switch\") {\n        // F\u00FCr Schalter: Definiere zus\u00E4tzlich den command_topic und die Payloads f\u00FCr ON/OFF.\n        payload.command_topic = `${baseTopic}/set`;\n        payload.payload_on = \"ON\";\n        payload.payload_off = \"OFF\";\n    } else if (haComponent === \"binary_sensor\") {\n        // Binary Sensoren sind in der Regel read-only.\n        // Hier definieren wir aber dennoch, welche Payloads als ON/OFF gelten.\n        payload.payload_on = \"ON\";\n        payload.payload_off = \"OFF\";\n    } else if (haComponent === \"sensor\") {\n        // F\u00FCr Sensoren k\u00F6nnen weitere Felder wie die Einheit gesetzt werden,\n        // sofern diese im State hinterlegt sind.\n        if (state.common?.unit) {\n            payload.unit_of_measurement = state.common.unit;\n        }\n        // Optional: Setze einen device_class, wenn die Rolle bestimmte Hinweise enth\u00E4lt.\n        const roleLower = (state.common?.role || \"\").toLowerCase();\n        if (roleLower.includes(\"temp\")) {\n            payload.device_class = \"temperature\";\n        } else if (roleLower.includes(\"humidity\")) {\n            payload.device_class = \"humidity\";\n        } else if (roleLower.includes(\"pressure\")) {\n            payload.device_class = \"pressure\";\n        }\n    }\n\n    return {\n        topic: discoveryTopic,\n        payload: payload,\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,SAAS,sBAAsB,OAAgC;AAhBtE;AAiBI,QAAM,QAAO,WAAM,WAAN,mBAAc;AAC3B,QAAM,UAAQ,WAAM,WAAN,mBAAc,SAAQ,IAAI,YAAY;AAEpD,MAAI,SAAS,WAAW;AAGpB,QAAI,KAAK,SAAS,QAAQ,GAAG;AACzB,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX,WAAW,SAAS,YAAY,SAAS,UAAU;AAC/C,WAAO;AAAA,EACX;AAEA,SAAO;AACX;AAkBO,SAAS,yBAAyB,SAAiB,OAA0C;AAnDpG;AAqDI,QAAM,cAAc,sBAAsB,KAAK;AAI/C,QAAM,WAAW,QAAQ,QAAQ,OAAO,GAAG;AAI3C,QAAM,iBAAiB,iBAAiB,WAAW,IAAI,QAAQ;AAK/D,QAAM,YAAY,YAAY,QAAQ,QAAQ,OAAO,GAAG,CAAC;AAGzD,QAAM,UAAe;AAAA,IACjB,MAAM;AAAA,IACN,aAAa,GAAG,SAAS;AAAA,IACzB,WAAW,kBAAkB,QAAQ;AAAA,EACzC;AAGA,MAAI,gBAAgB,UAAU;AAE1B,YAAQ,gBAAgB,GAAG,SAAS;AACpC,YAAQ,aAAa;AACrB,YAAQ,cAAc;AAAA,EAC1B,WAAW,gBAAgB,iBAAiB;AAGxC,YAAQ,aAAa;AACrB,YAAQ,cAAc;AAAA,EAC1B,WAAW,gBAAgB,UAAU;AAGjC,SAAI,WAAM,WAAN,mBAAc,MAAM;AACpB,cAAQ,sBAAsB,MAAM,OAAO;AAAA,IAC/C;AAEA,UAAM,eAAa,WAAM,WAAN,mBAAc,SAAQ,IAAI,YAAY;AACzD,QAAI,UAAU,SAAS,MAAM,GAAG;AAC5B,cAAQ,eAAe;AAAA,IAC3B,WAAW,UAAU,SAAS,UAAU,GAAG;AACvC,cAAQ,eAAe;AAAA,IAC3B,WAAW,UAAU,SAAS,UAAU,GAAG;AACvC,cAAQ,eAAe;AAAA,IAC3B;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,OAAO;AAAA,IACP;AAAA,EACJ;AACJ;",
  "names": []
}
